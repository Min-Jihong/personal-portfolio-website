import { Metadata } from "next"; import Image from "next/image"; import Link from "next/link"; import { notFound } from "next/navigation"; import { Badge } from "@/components/ui/badge"; import { Button } from "@/components/ui/button"; import { allProjects } from "@/data/projects"; export async function generateStaticParams() { return allProjects.map((project) => ({ id: project.id, })); } interface ProjectDetailPageProps { params: { id: string; }; } export async function generateMetadata({ params }: ProjectDetailPageProps): Promise<Metadata> { const project = allProjects.find((p) => p.id === params.id); if (!project) { return { title: "프로젝트를 찾을 수 없음", description: "요청하신 프로젝트를 찾을 수 없습니다.", }; } return { title: `${project.name} - 프로젝트 상세`, description: project.description, }; } export default function ProjectDetailPage({ params }: ProjectDetailPageProps) { const project = allProjects.find((p) => p.id === params.id); if (!project) { notFound(); } return ( <section className="container py-12 md:py-20"> <Button asChild variant="outline" className="mb-8"> <Link href="/projects">← 프로젝트 목록으로 돌아가기</Link> </Button> <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-start"> <div className="relative w-full h-64 sm:h-80 md:h-96 lg:h-[500px] rounded-lg overflow-hidden shadow-xl"> <Image src={project.image} alt={project.name} layout="fill" objectFit="cover" className="transition-transform duration-300 hover:scale-105" /> </div> <div className="flex flex-col gap-6"> <h1 className="text-4xl font-extrabold tracking-tight text-gray-900 dark:text-gray-100"> {project.name} </h1> <p className="text-lg text-gray-700 dark:text-gray-300 leading-relaxed"> {project.longDescription} </p> <div className="flex flex-wrap gap-2"> {project.technologies.map((tech) => ( <Badge key={tech} className="text-base px-3 py-1"> {tech} </Badge> ))} </div> <div className="flex flex-col sm:flex-row gap-4 mt-4"> {project.liveUrl && ( <Button asChild size="lg"> <a href={project.liveUrl} target="_blank" rel="noopener noreferrer"> 라이브 데모 보기 </a> </Button> )} {project.githubUrl && ( <Button asChild variant="outline" size="lg"> <a href={project.githubUrl} target="_blank" rel="noopener noreferrer"> GitHub 저장소 </a> </Button> )} </div> </div> </div> </section> ); }